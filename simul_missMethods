source("computeR.R")
source("little_test.R")
source("bootstrap_test.R")
source("find_SigmaS.R")
source("indexConsistency.R")
library(missMethods)
library(MASS)
library(norm)
library(foreach)
library(doSNOW)
library(doParallel)
library(future)
library(parallel)
library(foreach)
library(doRNG) 
library(doFuture)
library(latex2exp)
library(future.apply)
library(naniar)

for(yyy in c("norm", "lnorm")){
  
  #----------------------------------------------------------------------------------------
    ######### MAR ##############################
  #----------------------------------------------------------------------------------------
    alpha = 0.05
    n = 500
    MC = 100
    d = 5

    #----------------------------------------------------------------------------------------
    # Select the copula
    #----------------------------------------------------------------------------------------
    cp = claytonCopula(param = c(1), dim = d)
    #----------------------------------------------------------------------------------------
    # Generate the multivariate distribution
    #----------------------------------------------------------------------------------------
    P = mvdc(copula = cp, margins = c(rep(yyy,d)),
             paramMargins = rep(list(c(mean = 0, sd = 1)),d))

    data = rMvdc(n, P)
    
    #----------------------------------------------------------------------------------------
    # run little's and our tests
    #----------------------------------------------------------------------------------------

    xxx = seq(0.05, 0.4, length.out=7)

    little_power_mu = numeric(length = 7)
    little_power_cov = numeric(length = 7)
    little_power_aug = numeric(length = 7) 
    our_power = numeric(length = 7)
    our_power_corr = numeric(length = 7)
    our_power_mean = numeric(length = 7)

    ind = 1
    for (p in xxx){
      little_decision_cov = logical(length = MC)
      little_decision_mu = logical(length = MC)
      little_decision_aug = logical(length = MC)
      our_decision = logical(length = MC)
      our_decision_corr = logical(length = MC)
      our_decision_mean = logical(length = MC)
      
      for (i in 1:MC){
        X = delete_MAR_rank(data, p, c(1,2), cols_ctrl = c(3, 4))

        little_decision_aug[i] = little_test(X, alpha)
        little_decision_cov[i] = little_test(X, alpha, type = "cov")
        little_decision_mu[i] = mcar_test(data.frame(X))$p.value < alpha
        
        our_decision[i] = MCAR_meancovTest(X, alpha = 0.05, B = 99)
        our_decision_corr[i] = MCAR_covTest(X, alpha = 0.05, B = 99)
        our_decision_mean[i] = MCAR_meanTest(X, alpha = 0.05, B = 99)
      }

      little_power_aug[ind] = mean(little_decision_aug)
      little_power_mu[ind] = mean(little_decision_mu)
      little_power_cov[ind] = mean(little_decision_cov)
      
      our_power[ind] = mean(our_decision)
      our_power_corr[ind] = mean(our_decision_corr)
      our_power_mean[ind] = mean(our_decision_mean)
      
      ind = ind+1
    }

    png(paste(yyy, "_", "np", "_MAR1.png"))
    par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
    plot(xxx, little_power_mu, col="green", ylim = c(0,1), pch=18,
         xlab = "Missingness probability p", ylab = "Power", type="b", main = "")
    lines(xxx, little_power_aug, col="orange", pch=19, type = "b")
    lines(xxx, little_power_cov, col="brown", pch=20, type = "b")
    lines(xxx, our_power, col="blue", pch=21, type = "b")
    lines(xxx, our_power_corr, col="violet", pch=22, type = "b")
    lines(xxx, our_power_mean, col="aquamarine2", pch=23, type = "b")
    legend("right", inset = c(-0.4,0), xpd = TRUE, 
           horiz = FALSE, lty = 1, bty = "n",
           legend = c(TeX(r'($d^2_\mu$)'), TeX(r'($d^2_{cov}$)'), 
                      TeX(r'($d^2_{aug}$)'), "Omnibus", "Cov", "Mean"),
           col = c("green", "brown", "orange", "blue", "violet", "aquamarine2"),
           pch = c(18, 19, 20, 21, 22, 23))
    dev.off()

    #----------------------------------------------------------------------------------------
    ######### MAR ##############################
    #----------------------------------------------------------------------------------------
    alpha = 0.05
    n = 500
    MC = 100
    d = 5

    #----------------------------------------------------------------------------------------
    # Select the copula
    #----------------------------------------------------------------------------------------
    cp = claytonCopula(param = c(1), dim = d)
    #----------------------------------------------------------------------------------------
    # Generate the multivariate distribution
    #----------------------------------------------------------------------------------------
    P = mvdc(copula = cp, margins = c(rep(yyy,d)),
             paramMargins = rep(list(c(mean = 0, sd = 1)),d))

    data = rMvdc(n, P)
    
    #----------------------------------------------------------------------------------------
    # run little's and our tests
    #----------------------------------------------------------------------------------------

    xxx = seq(0.05, 0.4, length.out=7)

    little_power_mu = numeric(length = 7)
    little_power_cov = numeric(length = 7)
    little_power_aug = numeric(length = 7) 
    our_power = numeric(length = 7)
    our_power_corr = numeric(length = 7)
    our_power_mean = numeric(length = 7)

    ind = 1
    for (p in xxx){
      little_decision_cov = logical(length = MC)
      little_decision_mu = logical(length = MC)
      little_decision_aug = logical(length = MC)
      our_decision = logical(length = MC)
      our_decision_corr = logical(length = MC)
      our_decision_mean = logical(length = MC)
      
      for (i in 1:MC){
        X = delete_MAR_1_to_x(data, p, c(1,2), cols_ctrl = c(3, 4), x = 9)
        

        little_decision_aug[i] = little_test(X, alpha)
        little_decision_cov[i] = little_test(X, alpha, type = "cov")
        little_decision_mu[i] = mcar_test(data.frame(X))$p.value < alpha
        our_decision[i] = MCAR_meancovTest(X, alpha = 0.05, B = 99)
        our_decision_corr[i] = MCAR_covTest(X, alpha = 0.05, B = 99)
        our_decision_mean[i] = MCAR_meanTest(X, alpha = 0.05, B = 99)
      }
      
      little_power_aug[ind] = mean(little_decision_aug)
      little_power_mu[ind] = mean(little_decision_mu)
      little_power_cov[ind] = mean(little_decision_cov)
      our_power[ind] = mean(our_decision)
      our_power_corr[ind] = mean(our_decision_corr)
      our_power_mean[ind] = mean(our_decision_mean)
      ind = ind+1
    }

    png(paste(yyy, "_", "np", "_MAR2.png"))
    par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
    plot(xxx, little_power_mu, col="green", ylim = c(0,1), pch=18,
         xlab = "Missingness probability p", ylab = "Power", type="b", main = "")
    lines(xxx, little_power_aug, col="orange", pch=19, type = "b")
    lines(xxx, little_power_cov, col="brown", pch=20, type = "b")
    lines(xxx, our_power, col="blue", pch=21, type = "b")
    lines(xxx, our_power_corr, col="violet", pch=22, type = "b")
    lines(xxx, our_power_mean, col="aquamarine2", pch=23, type = "b")
    legend("right", inset = c(-0.4,0), xpd = TRUE, 
           horiz = FALSE, lty = 1, bty = "n",
           legend = c(TeX(r'($d^2_\mu$)'), TeX(r'($d^2_{cov}$)'), 
                      TeX(r'($d^2_{aug}$)'), "Omnibus", "Cov", "Mean"),
           col = c("green", "brown", "orange", "blue", "violet", "aquamarine2"),
           pch = c(18, 19, 20, 21, 22, 23))
    dev.off()
    
    #----------------------------------------------------------------------------------------
    ######### MCAR ############
    #----------------------------------------------------------------------------------------
    alpha = 0.05
    n = 500
    MC = 100
    d = 5
    
    #----------------------------------------------------------------------------------------
    # Select the copula
    #----------------------------------------------------------------------------------------
    cp = claytonCopula(param = c(1), dim = d)
    #----------------------------------------------------------------------------------------
    # Generate the multivariate distribution
    #----------------------------------------------------------------------------------------
    P = mvdc(copula = cp, margins = c(rep(yyy,d)),
             paramMargins = rep(list(c(mean = 0, sd = 1)),d))
    
    data = rMvdc(n, P)
    
    #----------------------------------------------------------------------------------------
    # run little's and our tests
    #----------------------------------------------------------------------------------------
    
    xxx = seq(0.05, 0.4, length.out=7)
    
    little_power_mu = numeric(length = 7)
    little_power_cov = numeric(length = 7)
    little_power_aug = numeric(length = 7) 
    our_power = numeric(length = 7)
    our_power_corr = numeric(length = 7)
    our_power_mean = numeric(length = 7)
    
    ind = 1
    for (p in xxx){
      little_decision_cov = logical(length = MC)
      little_decision_mu = logical(length = MC)
      little_decision_aug = logical(length = MC)
      our_decision = logical(length = MC)
      our_decision_corr = logical(length = MC)
      our_decision_mean = logical(length = MC)
      
      for (i in 1:MC){
        X = delete_MCAR(data, p, c(1,2))
        
        little_decision_aug[i] = little_test(X, alpha)
        little_decision_cov[i] = little_test(X, alpha, type = "cov")
        little_decision_mu[i] = mcar_test(data.frame(X))$p.value < alpha
        our_decision[i] = MCAR_meancovTest(X, alpha = 0.05, B = 99)
        our_decision_corr[i] = MCAR_covTest(X, alpha = 0.05, B = 99)
        our_decision_mean[i] = MCAR_meanTest(X, alpha = 0.05, B = 99)
      }
      
      little_power_aug[ind] = mean(little_decision_aug)
      little_power_mu[ind] = mean(little_decision_mu)
      little_power_cov[ind] = mean(little_decision_cov)
      our_power[ind] = mean(our_decision)
      our_power_corr[ind] = mean(our_decision_corr)
      our_power_mean[ind] = mean(our_decision_mean)
      
      ind = ind+1
    }
    
    png(paste(yyy,"_","np","_MCAR.png"))
    par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
    plot(xxx, little_power_mu, col="green", ylim = c(0,1), pch=18,
         xlab = "Missingness probability p", ylab = "Power", type="b", main = "")
    lines(xxx, little_power_aug, col="orange", pch=19, type = "b")
    lines(xxx, little_power_cov, col="brown", pch=20, type = "b")
    lines(xxx, our_power, col="blue", pch=21, type = "b")
    lines(xxx, our_power_corr, col="violet", pch=22, type = "b")
    lines(xxx, our_power_mean, col="aquamarine2", pch=23, type = "b")
    lines(xxx, rep(alpha, length(xxx)), lty = 3, col = "red")
    legend("right", inset = c(-0.4,0), xpd = TRUE, 
           horiz = FALSE, lty = 1, bty = "n",
           legend = c(TeX(r'($d^2_\mu$)'), TeX(r'($d^2_{cov}$)'), 
                      TeX(r'($d^2_{aug}$)'), "Omnibus", "Cov", "Mean"),
           col = c("green", "brown", "orange", "blue", "violet", "aquamarine2"),
           pch = c(18, 19, 20, 21, 22, 23))
    dev.off()
}
